
Locker-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e5c  08001e5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001e5c  08001e5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e5c  08001e5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000010  08001e74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08001e74  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006215  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f1  00000000  00000000  0002624e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00027740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  00027e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000155d3  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006005  00000000  00000000  0003da6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e352  00000000  00000000  00043a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c1dc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa0  00000000  00000000  000c1e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e08 	.word	0x08001e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001e08 	.word	0x08001e08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <UART_DEBUG_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void UART_DEBUG_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000160:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000162:	4a12      	ldr	r2, [pc, #72]	; (80001ac <UART_DEBUG_Init+0x50>)
 8000164:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800016c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800016e:	4b0e      	ldr	r3, [pc, #56]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000170:	2200      	movs	r2, #0
 8000172:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000176:	2200      	movs	r2, #0
 8000178:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 800017c:	2200      	movs	r2, #0
 800017e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000182:	220c      	movs	r2, #12
 8000184:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000188:	2200      	movs	r2, #0
 800018a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 800018e:	2200      	movs	r2, #0
 8000190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <UART_DEBUG_Init+0x4c>)
 8000194:	f001 f9ca 	bl	800152c <HAL_UART_Init>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d001      	beq.n	80001a2 <UART_DEBUG_Init+0x46>
  {
    Error_Handler();
 800019e:	f000 f89b 	bl	80002d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	40004800 	.word	0x40004800

080001b0 <UART_DEBUG_Transmit>:

void UART_DEBUG_Transmit(uint8_t *buffer){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit_IT(&huart3, (uint8_t*)buffer, strlen(buffer))!= HAL_OK){
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f7ff ffc7 	bl	800014c <strlen>
 80001be:	4603      	mov	r3, r0
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	461a      	mov	r2, r3
 80001c4:	6879      	ldr	r1, [r7, #4]
 80001c6:	4807      	ldr	r0, [pc, #28]	; (80001e4 <UART_DEBUG_Transmit+0x34>)
 80001c8:	f001 f9fd 	bl	80015c6 <HAL_UART_Transmit_IT>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <UART_DEBUG_Transmit+0x26>
		Error_Handler();
 80001d2:	f000 f881 	bl	80002d8 <Error_Handler>
	}
	UartTransmitReady = RESET;
 80001d6:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <UART_DEBUG_Transmit+0x38>)
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	20000000 	.word	0x20000000

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f2:	f000 fa05 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f6:	f000 f811 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fa:	f000 f84b 	bl	8000294 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  char *helloword = "Hello World\r\n";
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <main+0x2c>)
 8000200:	607b      	str	r3, [r7, #4]
  UART_DEBUG_Init();
 8000202:	f7ff ffab 	bl	800015c <UART_DEBUG_Init>
  UART_DEBUG_Transmit(helloword, strlen(helloword));
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f7ff ffa0 	bl	800014c <strlen>
 800020c:	4603      	mov	r3, r0
 800020e:	4619      	mov	r1, r3
 8000210:	6878      	ldr	r0, [r7, #4]
 8000212:	f7ff ffcd 	bl	80001b0 <UART_DEBUG_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000216:	e7fe      	b.n	8000216 <main+0x2a>
 8000218:	08001e20 	.word	0x08001e20

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	; 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	; 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fde4 	bl	8001df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023e:	2302      	movs	r3, #2
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	2310      	movs	r3, #16
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024a:	2300      	movs	r3, #0
 800024c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fd4e 	bl	8000cf4 <HAL_RCC_OscConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800025e:	f000 f83b 	bl	80002d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	230f      	movs	r3, #15
 8000264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000266:	2300      	movs	r3, #0
 8000268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ffba 	bl	80011f4 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000286:	f000 f827 	bl	80002d8 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_GPIO_Init+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <MX_GPIO_Init+0x40>)
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_GPIO_Init+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_GPIO_Init+0x40>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <MX_GPIO_Init+0x40>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6193      	str	r3, [r2, #24]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <MX_GPIO_Init+0x40>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f003 0304 	and.w	r3, r3, #4
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]

}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002de:	e7fe      	b.n	80002de <Error_Handler+0x6>

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <HAL_MspInit+0x5c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x5c>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_MspInit+0x60>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_MspInit+0x60>)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000
 8000340:	40010000 	.word	0x40010000

08000344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	; 0x38
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a68      	ldr	r2, [pc, #416]	; (8000500 <HAL_UART_MspInit+0x1bc>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d13a      	bne.n	80003da <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000364:	4b67      	ldr	r3, [pc, #412]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a66      	ldr	r2, [pc, #408]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b64      	ldr	r3, [pc, #400]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000378:	623b      	str	r3, [r7, #32]
 800037a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b61      	ldr	r3, [pc, #388]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a60      	ldr	r2, [pc, #384]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b5e      	ldr	r3, [pc, #376]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	61fb      	str	r3, [r7, #28]
 8000392:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039a:	2300      	movs	r3, #0
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a6:	4619      	mov	r1, r3
 80003a8:	4857      	ldr	r0, [pc, #348]	; (8000508 <HAL_UART_MspInit+0x1c4>)
 80003aa:	f000 fb49 	bl	8000a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b4:	2302      	movs	r3, #2
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b8:	2303      	movs	r3, #3
 80003ba:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003c0:	4619      	mov	r1, r3
 80003c2:	4851      	ldr	r0, [pc, #324]	; (8000508 <HAL_UART_MspInit+0x1c4>)
 80003c4:	f000 fb3c 	bl	8000a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	2025      	movs	r0, #37	; 0x25
 80003ce:	f000 fa50 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003d2:	2025      	movs	r0, #37	; 0x25
 80003d4:	f000 fa69 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80003d8:	e08e      	b.n	80004f8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a4b      	ldr	r2, [pc, #300]	; (800050c <HAL_UART_MspInit+0x1c8>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d138      	bne.n	8000456 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4a46      	ldr	r2, [pc, #280]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 80003ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ee:	61d3      	str	r3, [r2, #28]
 80003f0:	4b44      	ldr	r3, [pc, #272]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b41      	ldr	r3, [pc, #260]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a40      	ldr	r2, [pc, #256]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000414:	2304      	movs	r3, #4
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000418:	2302      	movs	r3, #2
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041c:	2303      	movs	r3, #3
 800041e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000424:	4619      	mov	r1, r3
 8000426:	4838      	ldr	r0, [pc, #224]	; (8000508 <HAL_UART_MspInit+0x1c4>)
 8000428:	f000 fb0a 	bl	8000a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800042c:	2308      	movs	r3, #8
 800042e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043c:	4619      	mov	r1, r3
 800043e:	4832      	ldr	r0, [pc, #200]	; (8000508 <HAL_UART_MspInit+0x1c4>)
 8000440:	f000 fafe 	bl	8000a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2026      	movs	r0, #38	; 0x26
 800044a:	f000 fa12 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800044e:	2026      	movs	r0, #38	; 0x26
 8000450:	f000 fa2b 	bl	80008aa <HAL_NVIC_EnableIRQ>
}
 8000454:	e050      	b.n	80004f8 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <HAL_UART_MspInit+0x1cc>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d14b      	bne.n	80004f8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	4a27      	ldr	r2, [pc, #156]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800046a:	61d3      	str	r3, [r2, #28]
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000474:	613b      	str	r3, [r7, #16]
 8000476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <HAL_UART_MspInit+0x1c0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0310 	and.w	r3, r3, #16
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a2:	4619      	mov	r1, r3
 80004a4:	481b      	ldr	r0, [pc, #108]	; (8000514 <HAL_UART_MspInit+0x1d0>)
 80004a6:	f000 facb 	bl	8000a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004bc:	4619      	mov	r1, r3
 80004be:	4815      	ldr	r0, [pc, #84]	; (8000514 <HAL_UART_MspInit+0x1d0>)
 80004c0:	f000 fabe 	bl	8000a40 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_UART_MspInit+0x1d4>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	637b      	str	r3, [r7, #52]	; 0x34
 80004ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004d0:	637b      	str	r3, [r7, #52]	; 0x34
 80004d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
 80004da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004dc:	f043 0310 	orr.w	r3, r3, #16
 80004e0:	637b      	str	r3, [r7, #52]	; 0x34
 80004e2:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_UART_MspInit+0x1d4>)
 80004e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004e6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2027      	movs	r0, #39	; 0x27
 80004ee:	f000 f9c0 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80004f2:	2027      	movs	r0, #39	; 0x27
 80004f4:	f000 f9d9 	bl	80008aa <HAL_NVIC_EnableIRQ>
}
 80004f8:	bf00      	nop
 80004fa:	3738      	adds	r7, #56	; 0x38
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800
 800050c:	40004400 	.word	0x40004400
 8000510:	40004800 	.word	0x40004800
 8000514:	40011000 	.word	0x40011000
 8000518:	40010000 	.word	0x40010000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f893 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <USART1_IRQHandler+0x10>)
 8000572:	f001 f86d 	bl	8001650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000016c 	.word	0x2000016c

08000580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f001 f863 	bl	8001650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	200001b0 	.word	0x200001b0

08000594 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <USART3_IRQHandler+0x10>)
 800059a:	f001 f859 	bl	8001650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005da:	f7ff ffe5 	bl	80005a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 fbe7 	bl	8001db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe03 	bl	80001ec <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005f0:	08001e64 	.word	0x08001e64
  ldr r2, =_sbss
 80005f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005f8:	200001f8 	.word	0x200001f8

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f923 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f808 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff fe60 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f93b 	bl	80008c6 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	f000 f903 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000004 	.word	0x20000004
 8000684:	2000000c 	.word	0x2000000c
 8000688:	20000008 	.word	0x20000008

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <HAL_IncTick+0x20>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	2000000c 	.word	0x2000000c
 80006ac:	200001f4 	.word	0x200001f4

080006b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	200001f4 	.word	0x200001f4

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	f7ff ff90 	bl	8000760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2d 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff42 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <__NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff35 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d008      	beq.n	8000906 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2204      	movs	r2, #4
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e020      	b.n	8000948 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 020e 	bic.w	r2, r2, #14
 8000914:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 0201 	bic.w	r2, r2, #1
 8000924:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f202 	lsl.w	r2, r1, r2
 8000934:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
	...

08000954 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000966:	2b02      	cmp	r3, #2
 8000968:	d005      	beq.n	8000976 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2204      	movs	r2, #4
 800096e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	e051      	b.n	8000a1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 020e 	bic.w	r2, r2, #14
 8000984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_DMA_Abort_IT+0xd0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d029      	beq.n	80009f4 <HAL_DMA_Abort_IT+0xa0>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <HAL_DMA_Abort_IT+0xd4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d022      	beq.n	80009f0 <HAL_DMA_Abort_IT+0x9c>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <HAL_DMA_Abort_IT+0xd8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d01a      	beq.n	80009ea <HAL_DMA_Abort_IT+0x96>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_DMA_Abort_IT+0xdc>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d012      	beq.n	80009e4 <HAL_DMA_Abort_IT+0x90>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <HAL_DMA_Abort_IT+0xe0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d00a      	beq.n	80009de <HAL_DMA_Abort_IT+0x8a>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <HAL_DMA_Abort_IT+0xe4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d102      	bne.n	80009d8 <HAL_DMA_Abort_IT+0x84>
 80009d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009d6:	e00e      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009dc:	e00b      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e2:	e008      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	e005      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	e002      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009f0:	2310      	movs	r3, #16
 80009f2:	e000      	b.n	80009f6 <HAL_DMA_Abort_IT+0xa2>
 80009f4:	2301      	movs	r3, #1
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <HAL_DMA_Abort_IT+0xe8>)
 80009f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	4798      	blx	r3
    } 
  }
  return status;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40020008 	.word	0x40020008
 8000a28:	4002001c 	.word	0x4002001c
 8000a2c:	40020030 	.word	0x40020030
 8000a30:	40020044 	.word	0x40020044
 8000a34:	40020058 	.word	0x40020058
 8000a38:	4002006c 	.word	0x4002006c
 8000a3c:	40020000 	.word	0x40020000

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e127      	b.n	8000ca4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a54:	2201      	movs	r2, #1
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f040 8116 	bne.w	8000c9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d034      	beq.n	8000ae4 <HAL_GPIO_Init+0xa4>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d80d      	bhi.n	8000a9a <HAL_GPIO_Init+0x5a>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d02b      	beq.n	8000ada <HAL_GPIO_Init+0x9a>
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d804      	bhi.n	8000a90 <HAL_GPIO_Init+0x50>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d031      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d01c      	beq.n	8000ac8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e048      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d043      	beq.n	8000b1c <HAL_GPIO_Init+0xdc>
 8000a94:	2b11      	cmp	r3, #17
 8000a96:	d01b      	beq.n	8000ad0 <HAL_GPIO_Init+0x90>
          break;
 8000a98:	e043      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a9a:	4a89      	ldr	r2, [pc, #548]	; (8000cc0 <HAL_GPIO_Init+0x280>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d026      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aa0:	4a87      	ldr	r2, [pc, #540]	; (8000cc0 <HAL_GPIO_Init+0x280>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d806      	bhi.n	8000ab4 <HAL_GPIO_Init+0x74>
 8000aa6:	4a87      	ldr	r2, [pc, #540]	; (8000cc4 <HAL_GPIO_Init+0x284>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d020      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aac:	4a86      	ldr	r2, [pc, #536]	; (8000cc8 <HAL_GPIO_Init+0x288>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d01d      	beq.n	8000aee <HAL_GPIO_Init+0xae>
          break;
 8000ab2:	e036      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab4:	4a85      	ldr	r2, [pc, #532]	; (8000ccc <HAL_GPIO_Init+0x28c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d019      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aba:	4a85      	ldr	r2, [pc, #532]	; (8000cd0 <HAL_GPIO_Init+0x290>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d016      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000ac0:	4a84      	ldr	r2, [pc, #528]	; (8000cd4 <HAL_GPIO_Init+0x294>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0xae>
          break;
 8000ac6:	e02c      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e028      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e023      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e01e      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e019      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000af6:	2304      	movs	r3, #4
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e012      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	611a      	str	r2, [r3, #16]
          break;
 8000b0e:	e008      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	615a      	str	r2, [r3, #20]
          break;
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	d801      	bhi.n	8000b2c <HAL_GPIO_Init+0xec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	e001      	b.n	8000b30 <HAL_GPIO_Init+0xf0>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2bff      	cmp	r3, #255	; 0xff
 8000b36:	d802      	bhi.n	8000b3e <HAL_GPIO_Init+0xfe>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x104>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3b08      	subs	r3, #8
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	401a      	ands	r2, r3
 8000b56:	6a39      	ldr	r1, [r7, #32]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 8096 	beq.w	8000c9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a58      	ldr	r2, [pc, #352]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b8a:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_GPIO_Init+0x29c>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <HAL_GPIO_Init+0x2a0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x19e>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4a      	ldr	r2, [pc, #296]	; (8000ce4 <HAL_GPIO_Init+0x2a4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x19a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a49      	ldr	r2, [pc, #292]	; (8000ce8 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x196>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a48      	ldr	r2, [pc, #288]	; (8000cec <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x192>
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	e004      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bde:	2300      	movs	r3, #0
 8000be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be2:	f002 0203 	and.w	r2, r2, #3
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	4093      	lsls	r3, r2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf0:	493a      	ldr	r1, [pc, #232]	; (8000cdc <HAL_GPIO_Init+0x29c>)
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4938      	ldr	r1, [pc, #224]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4933      	ldr	r1, [pc, #204]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	492e      	ldr	r1, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	604b      	str	r3, [r1, #4]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4929      	ldr	r1, [pc, #164]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4924      	ldr	r1, [pc, #144]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	608b      	str	r3, [r1, #8]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	491f      	ldr	r1, [pc, #124]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	491a      	ldr	r1, [pc, #104]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60cb      	str	r3, [r1, #12]
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4915      	ldr	r1, [pc, #84]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f47f aed0 	bne.w	8000a54 <HAL_GPIO_Init+0x14>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	372c      	adds	r7, #44	; 0x2c
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	10210000 	.word	0x10210000
 8000cc4:	10110000 	.word	0x10110000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10320000 	.word	0x10320000
 8000cd4:	10220000 	.word	0x10220000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40011400 	.word	0x40011400
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e26c      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8087 	beq.w	8000e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d14:	4b92      	ldr	r3, [pc, #584]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d00c      	beq.n	8000d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d20:	4b8f      	ldr	r3, [pc, #572]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 030c 	and.w	r3, r3, #12
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d112      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d10b      	bne.n	8000d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3a:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d06c      	beq.n	8000e20 <HAL_RCC_OscConfig+0x12c>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d168      	bne.n	8000e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e246      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5a:	d106      	bne.n	8000d6a <HAL_RCC_OscConfig+0x76>
 8000d5c:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a7f      	ldr	r2, [pc, #508]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e02e      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x98>
 8000d72:	4b7b      	ldr	r3, [pc, #492]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7a      	ldr	r2, [pc, #488]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b78      	ldr	r3, [pc, #480]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a77      	ldr	r2, [pc, #476]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e01d      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0xbc>
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a71      	ldr	r2, [pc, #452]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e00b      	b.n	8000dc8 <HAL_RCC_OscConfig+0xd4>
 8000db0:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a67      	ldr	r2, [pc, #412]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d013      	beq.n	8000df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fc6e 	bl	80006b0 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd8:	f7ff fc6a 	bl	80006b0 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e1fa      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xe4>
 8000df6:	e014      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df8:	f7ff fc5a 	bl	80006b0 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e00:	f7ff fc56 	bl	80006b0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b64      	cmp	r3, #100	; 0x64
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e1e6      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f0      	bne.n	8000e00 <HAL_RCC_OscConfig+0x10c>
 8000e1e:	e000      	b.n	8000e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d063      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2e:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3a:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d11c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d116      	bne.n	8000e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e1ba      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4939      	ldr	r1, [pc, #228]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	e03a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d020      	beq.n	8000eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc0f 	bl	80006b0 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fc0b 	bl	80006b0 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e19b      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4927      	ldr	r1, [pc, #156]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
 8000ec8:	e015      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fbee 	bl	80006b0 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fbea 	bl	80006b0 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e17a      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03a      	beq.n	8000f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d019      	beq.n	8000f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f10:	f7ff fbce 	bl	80006b0 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f18:	f7ff fbca 	bl	80006b0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e15a      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fada 	bl	80014f0 <RCC_Delay>
 8000f3c:	e01c      	b.n	8000f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_RCC_OscConfig+0x274>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f44:	f7ff fbb4 	bl	80006b0 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4a:	e00f      	b.n	8000f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4c:	f7ff fbb0 	bl	80006b0 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d908      	bls.n	8000f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e140      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42420000 	.word	0x42420000
 8000f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6c:	4b9e      	ldr	r3, [pc, #632]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e9      	bne.n	8000f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a6 	beq.w	80010d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8a:	4b97      	ldr	r3, [pc, #604]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10d      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a93      	ldr	r2, [pc, #588]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b91      	ldr	r3, [pc, #580]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb2:	4b8e      	ldr	r3, [pc, #568]	; (80011ec <HAL_RCC_OscConfig+0x4f8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d118      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fbe:	4b8b      	ldr	r3, [pc, #556]	; (80011ec <HAL_RCC_OscConfig+0x4f8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a8a      	ldr	r2, [pc, #552]	; (80011ec <HAL_RCC_OscConfig+0x4f8>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fb71 	bl	80006b0 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff fb6d 	bl	80006b0 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e0fd      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	4b81      	ldr	r3, [pc, #516]	; (80011ec <HAL_RCC_OscConfig+0x4f8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x312>
 8000ff8:	4b7b      	ldr	r3, [pc, #492]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a7a      	ldr	r2, [pc, #488]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6213      	str	r3, [r2, #32]
 8001004:	e02d      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x334>
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a75      	ldr	r2, [pc, #468]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	4b73      	ldr	r3, [pc, #460]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a72      	ldr	r2, [pc, #456]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	f023 0304 	bic.w	r3, r3, #4
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	e01c      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b05      	cmp	r3, #5
 800102e:	d10c      	bne.n	800104a <HAL_RCC_OscConfig+0x356>
 8001030:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a6c      	ldr	r2, [pc, #432]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4a69      	ldr	r2, [pc, #420]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6213      	str	r3, [r2, #32]
 8001048:	e00b      	b.n	8001062 <HAL_RCC_OscConfig+0x36e>
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a66      	ldr	r2, [pc, #408]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	4a63      	ldr	r2, [pc, #396]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d015      	beq.n	8001096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106a:	f7ff fb21 	bl	80006b0 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff fb1d 	bl	80006b0 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0ab      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001088:	4b57      	ldr	r3, [pc, #348]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0ee      	beq.n	8001072 <HAL_RCC_OscConfig+0x37e>
 8001094:	e014      	b.n	80010c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb0b 	bl	80006b0 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff fb07 	bl	80006b0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e095      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b4:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1ee      	bne.n	800109e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d105      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8081 	beq.w	80011de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010dc:	4b42      	ldr	r3, [pc, #264]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d061      	beq.n	80011ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d146      	bne.n	800117e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <HAL_RCC_OscConfig+0x4fc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fadb 	bl	80006b0 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fad7 	bl	80006b0 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e067      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d108      	bne.n	8001138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	492d      	ldr	r1, [pc, #180]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a19      	ldr	r1, [r3, #32]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	430b      	orrs	r3, r1
 800114a:	4927      	ldr	r1, [pc, #156]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x4fc>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff faab 	bl	80006b0 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff faa7 	bl	80006b0 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e037      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x46a>
 800117c:	e02f      	b.n	80011de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_RCC_OscConfig+0x4fc>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fa94 	bl	80006b0 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff fa90 	bl	80006b0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e020      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x498>
 80011aa:	e018      	b.n	80011de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e013      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40007000 	.word	0x40007000
 80011f0:	42420060 	.word	0x42420060

080011f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0d0      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d910      	bls.n	8001238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 0207 	bic.w	r2, r3, #7
 800121e:	4965      	ldr	r1, [pc, #404]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b8      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a58      	ldr	r2, [pc, #352]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800125a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	494d      	ldr	r1, [pc, #308]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d040      	beq.n	8001314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d115      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e07f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e073      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06b      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d2:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f023 0203 	bic.w	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4936      	ldr	r1, [pc, #216]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e4:	f7ff f9e4 	bl	80006b0 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff f9e0 	bl	80006b0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e053      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 020c 	and.w	r2, r3, #12
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d1eb      	bne.n	80012ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d210      	bcs.n	8001344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0207 	bic.w	r2, r3, #7
 800132a:	4922      	ldr	r1, [pc, #136]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e032      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001382:	f000 f821 	bl	80013c8 <HAL_RCC_GetSysClockFreq>
 8001386:	4601      	mov	r1, r0
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	5cd3      	ldrb	r3, [r2, r3]
 8001396:	fa21 f303 	lsr.w	r3, r1, r3
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCC_ClockConfig+0x1cc>)
 800139c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1d0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f942 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40022000 	.word	0x40022000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08001e44 	.word	0x08001e44
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c8:	b490      	push	{r4, r7}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013ce:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_GetSysClockFreq+0xb0>)
 80013d0:	1d3c      	adds	r4, r7, #4
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_GetSysClockFreq+0xb4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d002      	beq.n	8001408 <HAL_RCC_GetSysClockFreq+0x40>
 8001402:	2b08      	cmp	r3, #8
 8001404:	d003      	beq.n	800140e <HAL_RCC_GetSysClockFreq+0x46>
 8001406:	e02d      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_GetSysClockFreq+0xbc>)
 800140a:	623b      	str	r3, [r7, #32]
      break;
 800140c:	e02d      	b.n	800146a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	0c9b      	lsrs	r3, r3, #18
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800141a:	4413      	add	r3, r2
 800141c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001420:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	0c5b      	lsrs	r3, r3, #17
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800143a:	4413      	add	r3, r2
 800143c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001440:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001446:	fb02 f203 	mul.w	r2, r2, r3
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e004      	b.n	800145e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	623b      	str	r3, [r7, #32]
      break;
 8001462:	e002      	b.n	800146a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800146a:	6a3b      	ldr	r3, [r7, #32]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bc90      	pop	{r4, r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	08001e30 	.word	0x08001e30
 800147c:	08001e40 	.word	0x08001e40
 8001480:	40021000 	.word	0x40021000
 8001484:	007a1200 	.word	0x007a1200
 8001488:	003d0900 	.word	0x003d0900

0800148c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <HAL_RCC_GetHCLKFreq+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014a4:	f7ff fff2 	bl	800148c <HAL_RCC_GetHCLKFreq>
 80014a8:	4601      	mov	r1, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08001e54 	.word	0x08001e54

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014cc:	f7ff ffde 	bl	800148c <HAL_RCC_GetHCLKFreq>
 80014d0:	4601      	mov	r1, r0
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	0adb      	lsrs	r3, r3, #11
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	08001e54 	.word	0x08001e54

080014f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <RCC_Delay+0x34>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <RCC_Delay+0x38>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0a5b      	lsrs	r3, r3, #9
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800150c:	bf00      	nop
  }
  while (Delay --);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	60fa      	str	r2, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <RCC_Delay+0x1c>
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000004 	.word	0x20000004
 8001528:	10624dd3 	.word	0x10624dd3

0800152c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e03f      	b.n	80015be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7fe fef6 	bl	8000344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2224      	movs	r2, #36	; 0x24
 800155c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800156e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fb8f 	bl	8001c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	4613      	mov	r3, r2
 80015d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d130      	bne.n	8001642 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <HAL_UART_Transmit_IT+0x26>
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e029      	b.n	8001644 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_UART_Transmit_IT+0x38>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e022      	b.n	8001644 <HAL_UART_Transmit_IT+0x7e>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	88fa      	ldrh	r2, [r7, #6]
 8001610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	88fa      	ldrh	r2, [r7, #6]
 8001616:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2221      	movs	r2, #33	; 0x21
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
	...

08001650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_UART_IRQHandler+0x52>
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fa51 	bl	8001b42 <UART_Receive_IT>
      return;
 80016a0:	e17c      	b.n	800199c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80b1 	beq.w	800180c <HAL_UART_IRQHandler+0x1bc>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_UART_IRQHandler+0x70>
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80a6 	beq.w	800180c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_UART_IRQHandler+0x90>
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <HAL_UART_IRQHandler+0xb0>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0202 	orr.w	r2, r3, #2
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_UART_IRQHandler+0xd0>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00f      	beq.n	800174a <HAL_UART_IRQHandler+0xfa>
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	2b00      	cmp	r3, #0
 8001732:	d104      	bne.n	800173e <HAL_UART_IRQHandler+0xee>
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f043 0208 	orr.w	r2, r3, #8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 811f 	beq.w	8001992 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <HAL_UART_IRQHandler+0x11e>
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f9ea 	bl	8001b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf14      	ite	ne
 800177c:	2301      	movne	r3, #1
 800177e:	2300      	moveq	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <HAL_UART_IRQHandler+0x146>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d031      	beq.n	80017fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f92c 	bl	80019f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d023      	beq.n	80017f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d013      	beq.n	80017ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c6:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <HAL_UART_IRQHandler+0x354>)
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f8c0 	bl	8000954 <HAL_DMA_Abort_IT>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d016      	beq.n	8001808 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e8:	e00e      	b.n	8001808 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8ee 	bl	80019cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f0:	e00a      	b.n	8001808 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8ea 	bl	80019cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f8:	e006      	b.n	8001808 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8e6 	bl	80019cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001806:	e0c4      	b.n	8001992 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001808:	bf00      	nop
    return;
 800180a:	e0c2      	b.n	8001992 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 80a1 	bne.w	8001958 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 809b 	beq.w	8001958 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8095 	beq.w	8001958 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d04e      	beq.n	80018f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800185c:	8a3b      	ldrh	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8099 	beq.w	8001996 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001868:	8a3a      	ldrh	r2, [r7, #16]
 800186a:	429a      	cmp	r2, r3
 800186c:	f080 8093 	bcs.w	8001996 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8a3a      	ldrh	r2, [r7, #16]
 8001874:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b20      	cmp	r3, #32
 800187e:	d02b      	beq.n	80018d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0210 	bic.w	r2, r2, #16
 80018cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f803 	bl	80008de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f878 	bl	80019de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80018ee:	e052      	b.n	8001996 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d048      	beq.n	800199a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001908:	8a7b      	ldrh	r3, [r7, #18]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d045      	beq.n	800199a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800191c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0210 	bic.w	r2, r2, #16
 800194a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800194c:	8a7b      	ldrh	r3, [r7, #18]
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f844 	bl	80019de <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001956:	e020      	b.n	800199a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_UART_IRQHandler+0x324>
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f881 	bl	8001a74 <UART_Transmit_IT>
    return;
 8001972:	e013      	b.n	800199c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00e      	beq.n	800199c <HAL_UART_IRQHandler+0x34c>
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8c2 	bl	8001b12 <UART_EndTransmit_IT>
    return;
 800198e:	bf00      	nop
 8001990:	e004      	b.n	800199c <HAL_UART_IRQHandler+0x34c>
    return;
 8001992:	bf00      	nop
 8001994:	e002      	b.n	800199c <HAL_UART_IRQHandler+0x34c>
      return;
 8001996:	bf00      	nop
 8001998:	e000      	b.n	800199c <HAL_UART_IRQHandler+0x34c>
      return;
 800199a:	bf00      	nop
  }
}
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08001a4d 	.word	0x08001a4d

080019a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0210 	bic.w	r2, r2, #16
 8001a32:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff ffb0 	bl	80019cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b21      	cmp	r3, #33	; 0x21
 8001a86:	d13e      	bne.n	8001b06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a90:	d114      	bne.n	8001abc <UART_Transmit_IT+0x48>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d110      	bne.n	8001abc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	1c9a      	adds	r2, r3, #2
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	621a      	str	r2, [r3, #32]
 8001aba:	e008      	b.n	8001ace <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6211      	str	r1, [r2, #32]
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4619      	mov	r1, r3
 8001adc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10f      	bne.n	8001b02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001af0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
  }
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff38 	bl	80019a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b22      	cmp	r3, #34	; 0x22
 8001b54:	f040 8099 	bne.w	8001c8a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b60:	d117      	bne.n	8001b92 <UART_Receive_IT+0x50>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d113      	bne.n	8001b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	1c9a      	adds	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b90:	e026      	b.n	8001be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	d007      	beq.n	8001bb6 <UART_Receive_IT+0x74>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <UART_Receive_IT+0x82>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e008      	b.n	8001bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4619      	mov	r1, r3
 8001bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d148      	bne.n	8001c86 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0220 	bic.w	r2, r2, #32
 8001c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d123      	bne.n	8001c7c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0210 	bic.w	r2, r2, #16
 8001c48:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d10a      	bne.n	8001c6e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff feb2 	bl	80019de <HAL_UARTEx_RxEventCallback>
 8001c7a:	e002      	b.n	8001c82 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fe9c 	bl	80019ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e002      	b.n	8001c8c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cce:	f023 030c 	bic.w	r3, r3, #12
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <UART_SetConfig+0x114>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cfc:	f7ff fbe4 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	e002      	b.n	8001d0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d04:	f7ff fbcc 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8001d08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <UART_SetConfig+0x118>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	0119      	lsls	r1, r3, #4
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <UART_SetConfig+0x118>)
 8001d42:	fba3 0302 	umull	r0, r3, r3, r2
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2064      	movs	r0, #100	; 0x64
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	3332      	adds	r3, #50	; 0x32
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d60:	4419      	add	r1, r3
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <UART_SetConfig+0x118>)
 8001d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2064      	movs	r0, #100	; 0x64
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40013800 	.word	0x40013800
 8001dac:	51eb851f 	.word	0x51eb851f

08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	2500      	movs	r5, #0
 8001db4:	4e0c      	ldr	r6, [pc, #48]	; (8001de8 <__libc_init_array+0x38>)
 8001db6:	4c0d      	ldr	r4, [pc, #52]	; (8001dec <__libc_init_array+0x3c>)
 8001db8:	1ba4      	subs	r4, r4, r6
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	42a5      	cmp	r5, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	f000 f822 	bl	8001e08 <_init>
 8001dc4:	2500      	movs	r5, #0
 8001dc6:	4e0a      	ldr	r6, [pc, #40]	; (8001df0 <__libc_init_array+0x40>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <__libc_init_array+0x44>)
 8001dca:	1ba4      	subs	r4, r4, r6
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	42a5      	cmp	r5, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd8:	4798      	blx	r3
 8001dda:	3501      	adds	r5, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001de2:	4798      	blx	r3
 8001de4:	3501      	adds	r5, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08001e5c 	.word	0x08001e5c
 8001dec:	08001e5c 	.word	0x08001e5c
 8001df0:	08001e5c 	.word	0x08001e5c
 8001df4:	08001e60 	.word	0x08001e60

08001df8 <memset>:
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4402      	add	r2, r0
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d100      	bne.n	8001e02 <memset+0xa>
 8001e00:	4770      	bx	lr
 8001e02:	f803 1b01 	strb.w	r1, [r3], #1
 8001e06:	e7f9      	b.n	8001dfc <memset+0x4>

08001e08 <_init>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr

08001e14 <_fini>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	bf00      	nop
 8001e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1a:	bc08      	pop	{r3}
 8001e1c:	469e      	mov	lr, r3
 8001e1e:	4770      	bx	lr
